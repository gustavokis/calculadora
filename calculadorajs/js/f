class Calculator{
    constructor(previousOperationText,currentOperationText){
        this.previousOperationText = previousOperationText;
        this.currentOperationText = currentOperationText;
        this.currentOperation = "";
    }


    addDigit(digit) {
        if(digit === "." && this.currentOperationText.innertext.includes(".")){
            return;
        }


      this.currentOperation = digit;
      this.updatescreen();
}

    processOperation(operation){

            if(this.currentOperationText.innertext === "" && operation !== "C"){
                if(this.previousOperationText.innertext !== ""){
                    this.changeOperation();
                }
                return;
            }
        

        let operationValue
        const previous = +this.previousOperationText.innertext.split(' ')[0];
        const current = +this.currentOperationText.innertext;

        switch(operation){
            case "+":
                operationValue = previous + current;
                this.updatescreen(operationValue,operation,current,previous)
                break;
            case "/":
                operationValue = previous / current;
                this.updatescreen(operationValue,operation,current,previous)
                break;
            case "-":
                 operationValue = previous - current;
                 this.updatescreen(operationValue,operation,current,previous)
                 break;
            case "*":
                operationValue = previous * current;
                this.updatescreen(operationValue,operation,current,previous)
                 break;    
            case "DEL":
                this.processDelOperator();
                break;  
            case "CE":
                this.processClearCurrentOperation();
                break;        
            case "C":
                this.processClearAllOperation();
                break;        
            case "=":
                this.processEqualOperator();
                break;      
            default:
                return;
        }
    }

    updatescreen(operationValue = null, operation = null, current = null, previous = null){
        if(operationValue === null){
            this.currentOperationText.innertext += this.currentOperation;
        } else {
            if(previous === 0){
                operationValue = current;
            }
            this.previousOperationText.innertext = `${operationValue} ${operation}`
            this.currentOperationText.innertext = "";
        }
        
    }


    changeOperation(operation){
        const mathOperations = ["*", "/", "+", "-"]

        if(!mathOperations.includes(operation)){
            return;
        }

        this.previousOperationText.innertext = this.previousOperationText.innertext.slice(0,-1) + operation;

    }


    processDelOperator(){
        this.currentOperationText.innertext = this.currentOperationText.innertext.slice(0,-1);
    }


    processClearCurrentOperation(){
        currentOperationText.innertext = "";
    }


    processClearAllOperation(){
        currentOperationText.innertext = "";
        previousOperationText.innertext = "";
    }

    processEqualOperator(){
        const operation = previousOperationText.innertext.split(" ")[1];
        this.processOperation(operation);
    }

}



const calc = new Calculator(previousOperationText,currentOperationText);






if(+value >= 0 || value === "."){
    calc.addDigit(value)
}else{
    calc.processOperation(value)
}